
macro(use_vcpkg)
    if (DEFINED ENV{VCPKG_ROOT})
        set(VCPKG_FEATURE_FLAGS "versions")
        set(CMAKE_TOOLCHAIN_FILE "$ENV{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake"
                CACHE STRING "Vcpkg toolchain file")
        message(STATUS ">>> Using vcpkg with VCPKG_ROOT = $ENV{VCPKG_ROOT}")
        message(STATUS "    CMAKE_TOOLCHAIN_FILE = ${CMAKE_TOOLCHAIN_FILE}")
        message(STATUS "    VCPKG_TARGET_TRIPLET = $ENV{VCPKG_TARGET_TRIPLET}")     # =x64-windows, ...
    endif ()

    if (DEFINED ENV{VCPKG_DEFAULT_TRIPLET} AND NOT DEFINED VCPKG_TARGET_TRIPLET)
        set(VCPKG_TARGET_TRIPLET "$ENV{VCPKG_DEFAULT_TRIPLET}" CACHE STRING "")
    endif ()

    #    if (VCPKG_TARGET_TRIPLET)
    #    elseif (CMAKE_GENERATOR_PLATFORM MATCHES "^[Ww][Ii][Nn]32$")
    #        set(_VCPKG_TARGET_TRIPLET_ARCH x86)
    #    elseif (CMAKE_GENERATOR_PLATFORM MATCHES "^[Xx]64$")
    #        set(_VCPKG_TARGET_TRIPLET_ARCH x64)
    #    elseif (CMAKE_GENERATOR_PLATFORM MATCHES "^[Aa][Rr][Mm]$")
    #        set(_VCPKG_TARGET_TRIPLET_ARCH arm)
    #    elseif (CMAKE_GENERATOR_PLATFORM MATCHES "^[Aa][Rr][Mm]64$")
    #        set(_VCPKG_TARGET_TRIPLET_ARCH arm64)
    #    else ()
    #        if (CMAKE_GENERATOR MATCHES "^Visual Studio 14 2015 Win64$")
    #            set(_VCPKG_TARGET_TRIPLET_ARCH x64)
    #        elseif (CMAKE_GENERATOR MATCHES "^Visual Studio 14 2015 ARM$")
    #            set(_VCPKG_TARGET_TRIPLET_ARCH arm)
    #        elseif (CMAKE_GENERATOR MATCHES "^Visual Studio 14 2015$")
    #            set(_VCPKG_TARGET_TRIPLET_ARCH x86)
    #        elseif (CMAKE_GENERATOR MATCHES "^Visual Studio 15 2017 Win64$")
    #            set(_VCPKG_TARGET_TRIPLET_ARCH x64)
    #        elseif (CMAKE_GENERATOR MATCHES "^Visual Studio 15 2017 ARM$")
    #            set(_VCPKG_TARGET_TRIPLET_ARCH arm)
    #        elseif (CMAKE_GENERATOR MATCHES "^Visual Studio 15 2017$")
    #            set(_VCPKG_TARGET_TRIPLET_ARCH x86)
    #        elseif (CMAKE_GENERATOR MATCHES "^Visual Studio 16 2019$")
    #            if (CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "^[Xx]86$")
    #                set(_VCPKG_TARGET_TRIPLET_ARCH x86)
    #            elseif (CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "^[Aa][Mm][Dd]64$")
    #                set(_VCPKG_TARGET_TRIPLET_ARCH x64)
    #            elseif (CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "^[Aa][Rr][Mm]$")
    #                set(_VCPKG_TARGET_TRIPLET_ARCH arm)
    #            elseif (CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "^[Aa][Rr][Mm]64$")
    #                set(_VCPKG_TARGET_TRIPLET_ARCH arm64)
    #            else ()
    #
    #            endif ()
    #        else ()
    #            find_program(_VCPKG_CL cl)
    #            if (_VCPKG_CL MATCHES "amd64/cl.exe$" OR _VCPKG_CL MATCHES "x64/cl.exe$")
    #                set(_VCPKG_TARGET_TRIPLET_ARCH x64)
    #            elseif (_VCPKG_CL MATCHES "arm/cl.exe$")
    #                set(_VCPKG_TARGET_TRIPLET_ARCH arm)
    #            elseif (_VCPKG_CL MATCHES "arm64/cl.exe$")
    #                set(_VCPKG_TARGET_TRIPLET_ARCH arm64)
    #            elseif (_VCPKG_CL MATCHES "bin/cl.exe$" OR _VCPKG_CL MATCHES "x86/cl.exe$")
    #                set(_VCPKG_TARGET_TRIPLET_ARCH x86)
    #            elseif (CMAKE_HOST_SYSTEM_PROCESSOR STREQUAL "x86_64")
    #                set(_VCPKG_TARGET_TRIPLET_ARCH x64)
    #            else ()
    #                if (_CMAKE_IN_TRY_COMPILE)
    #                    message(STATUS "Unable to determine target architecture, continuing without vcpkg.")
    #                else ()
    #                    message(WARNING "Unable to determine target architecture, continuing without vcpkg.")
    #                endif ()
    #                set(VCPKG_TOOLCHAIN ON)
    #                return()
    #            endif ()
    #        endif ()
    #    endif ()

endmacro()
